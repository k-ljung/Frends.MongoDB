using Frends.MongoDB.Delete.Definitions;
using System.ComponentModel;
using System;
using System.Threading;
using MongoDB.Bson;
using MongoDB.Driver;
using System.IO;
using System.Threading.Tasks;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.Caching;
using System.Linq;

namespace Frends.MongoDB.Delete;

/// <summary>
/// MongoDB Task.
/// </summary>
public class MongoDB
{
	internal static readonly ObjectCache ClientCache = MemoryCache.Default;
	private static readonly CacheItemPolicy _cachePolicy = new() { SlidingExpiration = TimeSpan.FromHours(1) };

	/// <summary>
	/// MongoDB delete operation.
	/// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.MongoDB.Delete)
	/// </summary>
	/// <param name="input">Input parameters.</param>
	/// <param name="connection">Connection parameters.</param>
	/// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
	/// <returns>Object { bool Success, long Count }</returns>
	public static async Task<Result> Delete([PropertyTab] Input input, [PropertyTab] Connection connection, CancellationToken cancellationToken)
    {
        var collection = GetMongoCollection(connection.ConnectionString, connection.Database, connection.CollectionName);

        try
        {
            switch (input.InputType)
            {
                case InputType.File:
                    using (var streamReader = new StreamReader(input.File))
                    {
                        string line;
                        while ((line = await File.ReadAllTextAsync(input.File, cancellationToken)) != null)
                            if (line != null)
                                return new Result(true, await DeleteOperation(input, BsonDocument.Parse(line), collection, cancellationToken));
                        return new Result(false, 0);
                    }

                case InputType.Filter:
					if (string.IsNullOrWhiteSpace(input.Filter))
						throw new ArgumentException("Filter string missing.");

					return new Result(true, await DeleteOperation(input, BsonDocument.Parse(input.Filter), collection, cancellationToken));

                case InputType.Filters:
                    long count = 0;
                    foreach (var document in input.Filters)
                        count += await DeleteOperation(input, BsonDocument.Parse(document.Value), collection, cancellationToken);
                    return new Result(true, count);
                default:
                    return new Result(false, 0);
            };
        }
        catch (Exception ex)
        {
            throw new Exception($"Delete error: {ex}");
        }
    }

    private static async Task<long> DeleteOperation(Input input, BsonDocument filter, IMongoCollection<BsonDocument> collection, CancellationToken cancellationToken)
    {
        try
        {
            switch (input.DeleteOptions)
            {
                case Definitions.DeleteOptions.DeleteOne:
                    var delOne = await collection.DeleteOneAsync(filter, cancellationToken: cancellationToken);
                    return delOne.DeletedCount;
                case Definitions.DeleteOptions.DeleteMany:
                    var delMany = await collection.DeleteManyAsync(filter, cancellationToken: cancellationToken);
                    return delMany.DeletedCount;
                default:
                    return 0;
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"DeleteOperation error: {ex}");
        }
    }

	private static IMongoCollection<BsonDocument> GetMongoCollection(string connectionString, string database, string collectionName)
	{
		try
		{
			var dataBase = GetMongoDatabase(connectionString, database, collectionName);
			var collection = dataBase.GetCollection<BsonDocument>(collectionName);
			return collection;
		}
		catch (Exception ex)
		{
			throw new Exception($"GetMongoCollection error: {ex}");
		}
	}

	private static IMongoDatabase GetMongoDatabase(string connectionString, string database, string collectionName)
	{
		var cacheKey = GetMongoDbCacheKey(connectionString, database, collectionName);

		if (ClientCache.Get(cacheKey) is IMongoDatabase mongoDatabase)
		{
			return mongoDatabase;
		}

		try
		{
			var mongoClient = new MongoClient(connectionString);
			var dataBase = mongoClient.GetDatabase(database);

			ClientCache.Add(cacheKey, dataBase, _cachePolicy);

			return dataBase;
		}
		catch (Exception ex)
		{
			throw new Exception($"GetMongoDatabase error: {ex}");
		}
	}


	[ExcludeFromCodeCoverage]
	private static string GetMongoDbCacheKey(string connectionString, string database, string collectionName)
	{
		return $"{connectionString.GetHashCode()}:{database}:{collectionName}";
	}
}