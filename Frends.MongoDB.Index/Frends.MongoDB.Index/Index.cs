using Frends.MongoDB.Index.Definitions;
using MongoDB.Bson;
using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Runtime.Caching;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace Frends.MongoDB.Index;

/// <summary>
/// MongoDB Task.
/// </summary>
public class MongoDB
{
	internal static readonly ObjectCache ClientCache = MemoryCache.Default;
	private static readonly CacheItemPolicy _cachePolicy = new() { SlidingExpiration = TimeSpan.FromHours(1) };

	/// <summary>
	/// MongoDB index operation.
	/// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.MongoDB.Index)
	/// </summary>
	/// <param name="input">Input parameters.</param>
	/// <param name="connection">Connection parameters.</param>
	/// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
	/// <returns>Object { bool Success, long Count }</returns>
	public static async Task<Result> Index([PropertyTab] Input input, [PropertyTab] Connection connection, CancellationToken cancellationToken)
	{
		var collection = GetMongoCollection(connection.ConnectionString, connection.Database, connection.CollectionName);

		try
		{
			switch (input.IndexAction)
			{
				case IndexAction.Create:
					if (input.Fields == null || input.Fields?.Length == 0)
						throw new ArgumentException("Field name(s) missing.");

					return new Result(true, await CreateIndex(collection, input, cancellationToken));

				case IndexAction.Drop:
					await DropIndex(collection, input, cancellationToken);
					return new Result(true, input.IndexName);

				default:
					return new Result(false, "");
			};
		}
		catch (Exception ex)
		{
			throw new Exception($"Index error: {ex}");
		}


		

		


		//var compoundIndex = new CreateIndexModel<BsonDocument>(Builders<BsonDocument>.IndexKeys
		//	.Ascending(m => m.Type)
		//	.Ascending(m => m.Rated));
		//collection.Indexes.CreateOne(compoundIndex);

		//var foo = new CreateIndexOptions();
		//foo.Collation = new Collation("en", strength: CollationStrength.Primary);	
		//var indexModel = new CreateIndexModel<BsonDocument>(Builders<BsonDocument>.IndexKeys
		//.Ascending(m => m.)
		//collection.Indexes.CreateOne(indexModel);
	}

	private static async Task<string> CreateIndex(IMongoCollection<BsonDocument> collection, Input input, CancellationToken cancellationToken)
	{
		if (input.DropExistingIndex && !string.IsNullOrWhiteSpace(input.IndexName))
		{
			await DropIndex(collection, input, cancellationToken);
		}

		var indexOptions = new CreateIndexOptions { Name = string.IsNullOrWhiteSpace(input.IndexName) ? null : input.IndexName };
		var indexKeys = Builders<BsonDocument>.IndexKeys.Combine(input.Fields.Select(field => Builders<BsonDocument>.IndexKeys.Ascending(field.Value)));

		var indexModel = new CreateIndexModel<BsonDocument>(indexKeys, indexOptions);
		var name =  await collection.Indexes.CreateOneAsync(indexModel, cancellationToken: cancellationToken);
		return name;
	}

	private static async Task DropIndex(IMongoCollection<BsonDocument> collection, Input input, CancellationToken cancellationToken)
	{
		await collection.Indexes.DropOneAsync(input.IndexName, cancellationToken);
	}

	private static IMongoCollection<BsonDocument> GetMongoCollection(string connectionString, string database, string collectionName)
	{
		try
		{
			var dataBase = GetMongoDatabase(connectionString, database, collectionName);
			var collection = dataBase.GetCollection<BsonDocument>(collectionName);
			return collection;
		}
		catch (Exception ex)
		{
			throw new Exception($"GetMongoCollection error: {ex}");
		}
	}

	private static IMongoDatabase GetMongoDatabase(string connectionString, string database, string collectionName)
	{
		var cacheKey = GetMongoDbCacheKey(connectionString, database, collectionName);

		if (ClientCache.Get(cacheKey) is IMongoDatabase mongoDatabase)
		{
			return mongoDatabase;
		}

		try
		{
			var mongoClient = new MongoClient(connectionString);
			var dataBase = mongoClient.GetDatabase(database);

			ClientCache.Add(cacheKey, dataBase, _cachePolicy);

			return dataBase;
		}
		catch (Exception ex)
		{
			throw new Exception($"GetMongoDatabase error: {ex}");
		}
	}

	internal static void ClearClientCache()
	{
		var cacheKeys = ClientCache.Select(kvp => kvp.Key).ToList();
		foreach (var cacheKey in cacheKeys)
		{
			ClientCache.Remove(cacheKey);
		}
	}

	[ExcludeFromCodeCoverage]
	private static string GetMongoDbCacheKey(string connectionString, string database, string collectionName)
	{
		return $"{connectionString.GetHashCode()}:{database}:{collectionName}";
	}
}
