using Frends.MongoDB.Insert.Definitions;
using System.ComponentModel;
using System;
using System.Threading.Tasks;
using System.Threading;
using System.IO;
using MongoDB.Bson;
using MongoDB.Driver;
using System.Collections.Generic;
using System.Runtime.Caching;
using System.Diagnostics.CodeAnalysis;

namespace Frends.MongoDB.Insert;

/// <summary>
/// MongoDB Task.
/// </summary>
public class MongoDB
{
	internal static readonly ObjectCache ClientCache = MemoryCache.Default;
	private static readonly CacheItemPolicy _cachePolicy = new() { SlidingExpiration = TimeSpan.FromHours(1) };


	/// <summary>
	/// MongoDB insert operation.
	/// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.MongoDB.Insert)
	/// </summary>
	/// <param name="input">Input parameters.</param>
	/// <param name="connection">Connection parameters.</param>
	/// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
	/// <returns>Object { bool success, List&lt;string&gt; id }</returns>
	public static async Task<Result> Insert([PropertyTab] Input input, [PropertyTab] Connection connection, CancellationToken cancellationToken)
    {
        try
        {
            var collection = GetMongoCollection(connection.ConnectionString, connection.Database, connection.CollectionName);
            var ids = new List<string>();

            switch (input.InputType)
            {
                case InputType.File:
                    using (var streamReader = new StreamReader(input.File))
                    {
                        string line;
                        while ((line = await File.ReadAllTextAsync(input.File, cancellationToken)) != null)

                            if (line != null)
                            {
                                var fileDoc = BsonDocument.Parse(line);
                                await collection.InsertOneAsync(fileDoc, cancellationToken: cancellationToken);
                                ids.Add(fileDoc["_id"].ToString());
                                return new Result(true, ids);
                            }

                        return new Result(false, ids);
                    }
                case InputType.Document:
                    var doc = BsonDocument.Parse(input.Document);
                    await collection.InsertOneAsync(doc, cancellationToken: cancellationToken);
                    ids.Add(doc["_id"].ToString());
                    return new Result(true, ids);

                case InputType.Documents:
                    foreach (var document in input.Documents)
                    {
                        var docs = BsonDocument.Parse(document.Value);
                        await collection.InsertOneAsync(docs, cancellationToken: cancellationToken);
                        ids.Add(docs["_id"].ToString());
                    }
                    return new Result(true, ids);

                default: 
					return new Result(false, null);
            };
        }
        catch (Exception ex)
        {
            throw new Exception($"Insert error: {ex}");
        }
    }

	private static IMongoCollection<BsonDocument> GetMongoCollection(string connectionString, string database, string collectionName)
	{
		try
		{
			var dataBase = GetMongoDatabase(connectionString, database, collectionName);
			var collection = dataBase.GetCollection<BsonDocument>(collectionName);
			return collection;
		}
		catch (Exception ex)
		{
			throw new Exception($"GetMongoCollection error: {ex}");
		}
	}

	private static IMongoDatabase GetMongoDatabase(string connectionString, string database, string collectionName)
	{
		var cacheKey = GetMongoDbCacheKey(connectionString, database, collectionName);

		if (ClientCache.Get(cacheKey) is IMongoDatabase mongoDatabase)
		{
			return mongoDatabase;
		}

		try
		{
			var mongoClient = new MongoClient(connectionString);
			var dataBase = mongoClient.GetDatabase(database);

			ClientCache.Add(cacheKey, dataBase, _cachePolicy);

			return dataBase;
		}
		catch (Exception ex)
		{
			throw new Exception($"GetMongoDatabase error: {ex}");
		}
	}

	[ExcludeFromCodeCoverage]
	private static string GetMongoDbCacheKey(string connectionString, string database, string collectionName)
	{
		return $"{connectionString.GetHashCode()}:{database}:{collectionName}";
	}
}