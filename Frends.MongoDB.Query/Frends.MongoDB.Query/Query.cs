using Frends.MongoDB.Query.Definitions;
using System.ComponentModel;
using System;
using System.Threading;
using Mongo = MongoDB;
using MongoDB.Bson;
using MongoDB.Driver;
using MongoDB.Bson.IO;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.Caching;

namespace Frends.MongoDB.Query;

/// <summary>
/// MongoDB Task.
/// </summary>
public class MongoDB
{
	internal static readonly ObjectCache ClientCache = MemoryCache.Default;
	private static readonly CacheItemPolicy _cachePolicy = new() { SlidingExpiration = TimeSpan.FromHours(1) };


	/// <summary>
	/// MongoDB query operation.
	/// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.MongoDB.Query)
	/// </summary>
	/// <param name="input">Input parameters.</param>
	/// <param name="connection">Connection parameters.</param>
	/// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
	/// <returns>Object { bool Success, List&lt;string&gt; Data }</returns>
	public static Result Query([PropertyTab] Input input, [PropertyTab] Connection connection, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(input.Filter))
            throw new ArgumentException("Query error: Filter can't be null.");

        try
        {
            var li = new List<string>();
			var jsonSettings = new JsonWriterSettings { OutputMode =  ( Mongo.Bson.IO.JsonOutputMode)(int)input.JsonOutputMode };
            var collection = GetMongoCollection(connection.ConnectionString, connection.Database, connection.CollectionName);
			
			if (input.QueryOptions == QueryOptions.QueryOne)
			{
				var document = collection.Find(input.Filter).FirstOrDefault(cancellationToken);
				if (document != null)
					li.Add(document.ToJson(jsonSettings));
			}
			else
			{
				var cursor = collection.Find(input.Filter).ToCursor(cancellationToken);

				foreach (var document in cursor.ToEnumerable(cancellationToken: cancellationToken))
					li.Add(document.ToJson(jsonSettings));
			}
			
            return new Result(true, li);
        }
        catch (Exception ex)
        {
            throw new Exception($"Query error: {ex}");
        }
    }

	private static IMongoCollection<BsonDocument> GetMongoCollection(string connectionString, string database, string collectionName)
	{
		try
		{
			var dataBase = GetMongoDatabase(connectionString, database, collectionName);
			var collection = dataBase.GetCollection<BsonDocument>(collectionName);
			return collection;
		}
		catch (Exception ex)
		{
			throw new Exception($"GetMongoCollection error: {ex}");
		}
	}

	private static IMongoDatabase GetMongoDatabase(string connectionString, string database, string collectionName)
	{
		var cacheKey = GetMongoDbCacheKey(connectionString, database, collectionName);

		if (ClientCache.Get(cacheKey) is IMongoDatabase mongoDatabase)
		{
			return mongoDatabase;
		}

		try
		{
			var mongoClient = new MongoClient(connectionString);
			var dataBase = mongoClient.GetDatabase(database);

			ClientCache.Add(cacheKey, dataBase, _cachePolicy);

			return dataBase;
		}
		catch (Exception ex)
		{
			throw new Exception($"GetMongoDatabase error: {ex}");
		}
	}

	[ExcludeFromCodeCoverage]
	private static string GetMongoDbCacheKey(string connectionString, string database, string collectionName)
	{
		return $"{connectionString.GetHashCode()}:{database}:{collectionName}";
	}
}